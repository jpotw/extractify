// src/components/TemplateLoader.tsx

import React, { useRef, useCallback } from 'react';
import { useTemplateStore } from '../store/templateStore';
import type { Template } from '../types';

/**
 * @file A component for loading a template from a local JSON file.
 * @component
 *
 * @description
 * This component renders a "Load Template" button and handles the logic for
 * reading a user-selected .json file. It validates the file's structure
 * to ensure it's a valid template file before updating the global state
 * via `useTemplateStore`.
 *
 * @returns {JSX.Element} The rendered template loader button.
 */
const TemplateLoader: React.FC = () => {
  const { setTemplates } = useTemplateStore();
  const fileInputRef = useRef<HTMLInputElement>(null);

  /**
   * Validates the structure of the loaded data to ensure it's an array of Templates.
   * @param {any} data - The data parsed from the JSON file.
   * @returns {boolean} - True if the data is a valid template array, false otherwise.
   */
  const isValidTemplateFile = (data: any): data is Template[] => {
    if (!Array.isArray(data)) return false;
    // Check if at least one object in the array has the required properties.
    // A more robust check would iterate over every item.
    if (data.length > 0) {
      const firstItem = data[0];
      return (
        'id' in firstItem &&
        'name' in firstItem &&
        'bbox' in firstItem &&
        'x1' in firstItem.bbox &&
        'y1' in firstItem.bbox &&
        'x2' in firstItem.bbox &&
        'y2' in firstItem.bbox
      );
    }
    // An empty array is also a valid template file.
    return true;
  };

  /**
   * Handles the file selection event from the hidden input.
   * Reads the file, parses it as JSON, validates it, and updates the store.
   */
  const handleFileChange = useCallback(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const text = e.target?.result;
          if (typeof text !== 'string') throw new Error('Failed to read file.');

          const data = JSON.parse(text);

          if (isValidTemplateFile(data)) {
            setTemplates(data);
          } else {
            alert('Invalid template file. Please select a valid JSON template file generated by Extractify.');
          }
        } catch (error) {
          console.error('Error parsing template file:', error);
          alert('Could not parse the selected file. Please ensure it is a valid JSON file.');
        } finally {
            // Reset the input value to allow loading the same file again
            if (fileInputRef.current) {
                fileInputRef.current.value = '';
            }
        }
      };
      reader.readAsText(file);
    },
    [setTemplates],
  );

  /**
   * Programmatically clicks the hidden file input to open the file dialog.
   */
  const handleButtonClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <>
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept=".json,application/json"
        style={{ display: 'none' }}
      />
      <button onClick={handleButtonClick}>Load Template</button>
    </>
  );
};

export default TemplateLoader;